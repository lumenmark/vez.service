// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using UsaWeb.Service.Models;

namespace UsaWeb.Service.Data
{
    public partial class Usaweb_DevContext
    {
        private IUsaweb_DevContextProcedures _procedures;

        public virtual IUsaweb_DevContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Usaweb_DevContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IUsaweb_DevContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_GetSS_CallsByMrnResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetSS_RawResultResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetSS_RawResultByMrnResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetWordsByFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetWordsPieByFilterResult>().HasNoKey().ToView(null);
        }
    }

    public partial class Usaweb_DevContextProcedures : IUsaweb_DevContextProcedures
    {
        private readonly Usaweb_DevContext _context;

        public Usaweb_DevContextProcedures(Usaweb_DevContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_GetSS_CallsByMrnResult>> sp_GetSS_CallsByMrnAsync(int? mrn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "mrn",
                    Value = mrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetSS_CallsByMrnResult>("EXEC @returnValue = [dbo].[sp_GetSS_CallsByMrn] @mrn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetSS_RawResultResult>> sp_GetSS_RawResultAsync(string dateStart, string dateEnd, string status, string orderBy, string speciality, string surgeon, string dept, string statusfilter, string userAssignedFilter, string searchValue, string searchFirst, string searchLast, string includeExlude, bool? isArrival, bool? isNeedClearance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dateStart",
                    Size = 50,
                    Value = dateStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateEnd",
                    Size = 50,
                    Value = dateEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 50,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "orderBy",
                    Size = 100,
                    Value = orderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "speciality",
                    Size = 1000,
                    Value = speciality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "surgeon",
                    Size = 1000,
                    Value = surgeon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dept",
                    Size = 1000,
                    Value = dept ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusfilter",
                    Size = 1000,
                    Value = statusfilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userAssignedFilter",
                    Size = 1000,
                    Value = userAssignedFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "searchValue",
                    Size = 256,
                    Value = searchValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "searchFirst",
                    Size = 256,
                    Value = searchFirst ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "searchLast",
                    Size = 256,
                    Value = searchLast ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "includeExlude",
                    Size = 50,
                    Value = includeExlude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isArrival",
                    Value = isArrival ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isNeedClearance",
                    Value = isNeedClearance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetSS_RawResultResult>("EXEC @returnValue = [dbo].[sp_GetSS_RawResult] @dateStart, @dateEnd, @status, @orderBy, @speciality, @surgeon, @dept, @statusfilter, @userAssignedFilter, @searchValue, @searchFirst, @searchLast, @includeExlude, @isArrival, @isNeedClearance", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetSS_RawResultByMrnResult>> sp_GetSS_RawResultByMrnAsync(int? mrn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "mrn",
                    Value = mrn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetSS_RawResultByMrnResult>("EXEC @returnValue = [dbo].[sp_GetSS_RawResultByMrn] @mrn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetWordsByFilterResult>> sp_GetWordsByFilterAsync(string sitename, string provider, string patientage, string patientsex, string specialty, string minutewaitexamroom, string minutewaitprovider, string datestart, string dateend, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sitename",
                    Size = 500,
                    Value = sitename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "provider",
                    Size = 500,
                    Value = provider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "patientage",
                    Size = 500,
                    Value = patientage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "patientsex",
                    Size = 50,
                    Value = patientsex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "specialty",
                    Size = 500,
                    Value = specialty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minutewaitexamroom",
                    Size = 500,
                    Value = minutewaitexamroom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minutewaitprovider",
                    Size = 500,
                    Value = minutewaitprovider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datestart",
                    Size = 50,
                    Value = datestart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateend",
                    Size = 50,
                    Value = dateend ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetWordsByFilterResult>("EXEC @returnValue = [dbo].[sp_GetWordsByFilter] @sitename, @provider, @patientage, @patientsex, @specialty, @minutewaitexamroom, @minutewaitprovider, @datestart, @dateend", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetWordsPieByFilterResult>> sp_GetWordsPieByFilterAsync(string sitename, string provider, string patientage, string patientsex, string specialty, string minutewaitexamroom, string minutewaitprovider, string datestart, string dateend, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sitename",
                    Size = 500,
                    Value = sitename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "provider",
                    Size = 500,
                    Value = provider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "patientage",
                    Size = 500,
                    Value = patientage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "patientsex",
                    Size = 50,
                    Value = patientsex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "specialty",
                    Size = 500,
                    Value = specialty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minutewaitexamroom",
                    Size = 500,
                    Value = minutewaitexamroom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minutewaitprovider",
                    Size = 500,
                    Value = minutewaitprovider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datestart",
                    Size = 50,
                    Value = datestart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateend",
                    Size = 50,
                    Value = dateend ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetWordsPieByFilterResult>("EXEC @returnValue = [dbo].[sp_GetWordsPieByFilter] @sitename, @provider, @patientage, @patientsex, @specialty, @minutewaitexamroom, @minutewaitprovider, @datestart, @dateend", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
